#include "MUtility.h"

// Table of CRC values for high¨Corder byte
static U8 auchCRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40
} ;

// Table of CRC values for low¨Corder byte
static U8 auchCRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
	0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
	0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
	0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
	0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
	0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
	0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
	0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
	0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
} ;

U16 IDCOM_CRC16(const U8 *buf, U16 srcLen)
{
	U8 uchCRCHi = 0xFF ;                           // high byte of CRC initialized
	U8 uchCRCLo = 0xFF ;                           // low byte of CRC initialized
	U8 uIndex ;                                    // will index into CRC lookup table

	while (srcLen--)                               // pass through message buffer
	{
		uIndex = uchCRCHi ^ *buf++ ;               // calculate the CRC
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
		uchCRCLo = auchCRCLo[uIndex] ;
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
}

U8 MakeBcc(U8 *data, U8 size)
{
	U8 bcc=0;                                      // bcc first value
	for(U8 i=0;i<size;i++)
	{
		bcc ^= data[i];                            // xor
	}
	return bcc;
}

U8 Hex2Asc(U8 *hex, U8 hexSize, U8 *szChar)
{
	U8 H4 = 0;                                     // high 4 bits
	U8 L4 = 0;                                     // low 4 bits
	for(U8 i=0; i<hexSize; i++)                    // eg:0x12 ==> "12"
	{                                              //    0x1a ==> "1a" (low case)
		H4 = hex[i]>>4;                            // get high 4 bis of the source
		L4 = hex[i]&0x0f;                          // get low 4 bits of the source
		*szChar++ = (H4<=9)? (H4+0x30): (H4+0x57); // convert high 4 bits to char1
		*szChar++ = (L4<=9)? (L4+0x30): (L4+0x57); // convert low  4 bits to char2
	}
	return (hexSize*2);
}

U8 Asc2Hex(U8 *szChar, U8 charSize, U8 *hex)
{
	char H4 = 0;                                   // high 4 bits
	char L4 = 0;                                   // low 4 bits
	for(U8 i=0; i<charSize/2; i++)                 // eg: "12"     ==> 0x12
	{                                              //     "1a"/"1A"==> 0x1a  case-insensitive
		H4 = *szChar++;                            // get the first char of the source
		L4 = *szChar++;                            // get the second char of the source
		H4 = (0x61<=H4&&H4<=0x66)? (H4-0x61+0x0a): // convert the first char to the value of high 4 bits 
			((0x41<=H4&&H4<=0x46)? (H4-0x41+0x0a): // "a"~"f"==>a~f/"A"~"F"==>a~f
			((0x30<=H4&&H4<=0x39)? (H4-0x30):0));  // "0"~"9"==>0~9
		L4 = (0x61<=L4&&L4<=0x66)? (L4-0x61+0x0a): // convert the second char to the value of low 4 bits
			((0x41<=L4&&L4<=0x46)? (L4-0x41+0x0a): // "a"~"f"  ==> a~f/"A"~"F"  ==> a~f
			((0x30<=L4&&L4<=0x39)? (L4-0x30):0));  // "0"~"9"  ==> 0~9
		hex[i]=(H4<<4) | L4;
	}
	return (charSize/2);
}

CMQueue::CMQueue(U8 unit, U8 max)
{
	m_head = 0;
	m_tail = 0;
	m_num  = 0;

	m_unit = unit;
	m_max  = max;
	m_buff = new U8[m_unit*m_max];
}

CMQueue::~CMQueue(void)
{
	if(m_buff)
	{
		delete m_buff;
		m_buff=0;
	}
}

U8 CMQueue::Push(void* pNode)
{
	if(m_num>=m_max)
		return m_num;

	for(U8 i=0;i<m_unit;i++)
	{
		m_buff[m_tail*m_unit + i] = ((U8*)pNode)[i];
	}

	m_num++;
	m_tail++;
	m_tail %= m_max;

	return m_num;
}

U8 CMQueue::Pop(void* pNode)
{
	if(0==m_num)
		return 0;

	for(U8 i=0;i<m_unit;i++)
	{
		((U8*)pNode)[i] = m_buff[m_head*m_unit + i];
	}

	m_num--;
	m_head++;
	m_head %= m_max;
	
	if(0==m_num)
	{
		Clear();
	}
	return (m_num+1);
}

void CMQueue::Clear(void)
{
	m_head = m_tail = m_num = 0;
}

U8 CMQueue::GetNum(void)
{
	return m_num;
}
